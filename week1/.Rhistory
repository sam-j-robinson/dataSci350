library(readr)
JitteredHeadCount <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
View(JitteredHeadCount)
library(readr)
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
View(jhc)
library(readr)
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
gameCodes <- rapply(jhc, function(x)length(unique(x)))
View(gameCodes)
gameCodes <- rapply(jhc[1], function(x)length(unique(x)))
gameCodes
library(readr)
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
gameCodes <- unique(jhc[1])
gameCodes
library(ggplot2)
##-----Merge 2 Sorted vectors into 1 sorted vector-----
# Prepare test data
a = sort(sample(1:1000, 100))
b = sort(sample(1:1000, 100))
# Initialize indices
a_ix = 1 # input 1
b_ix = 1 # input 2
c_ix = 1 # output
c = rep(0,length(a) + length(b)) # Initialize ouput to all zeros
while ( (a_ix <= length(a)) & (b_ix <= length(b)) ){ # Fill in c, until one index runs out
if (a[a_ix] < b[b_ix]){                            # If the next element of a is smaller
c[c_ix] = a[a_ix]                                # - then add a-element to c
c_ix  = c_ix + 1                                 # - Increment the index of c
a_ix = a_ix +1                                   # - Increment the index of a
} else {                                           # Else (next element of b is smaller)
c[c_ix] = b[b_ix]                                # - then add b-element to c
c_ix  = c_ix + 1                                 # - Increment the index of c
b_ix = b_ix +1                                   # - Increment the index of b
}
}
# Since a or b might be different lengths, we need to check and finish off c
while( (a_ix <= length(a)) ){ # Check if any a left
c[c_ix] = a[a_ix]
c_ix  = c_ix + 1
a_ix = a_ix +1
}
while( (b_ix <= length(b)) ){ # Check if any b left
c[c_ix] = b[b_ix]
c_ix  = c_ix + 1
b_ix = b_ix +1
}
c <- sort(c(a,b))
##-----Merge 2 Sorted vectors into 1 sorted vector-----
# Prepare test data
a = sort(sample(1:1000, 100))
b = sort(sample(1:1000, 100))
# Initialize indices
a_ix = 1 # input 1
b_ix = 1 # input 2
c_ix = 1 # output
c = rep(0,length(a) + length(b)) # Initialize ouput to all zeros
while ( (a_ix <= length(a)) & (b_ix <= length(b)) ){ # Fill in c, until one index runs out
if (a[a_ix] < b[b_ix]){                            # If the next element of a is smaller
c[c_ix] = a[a_ix]                                # - then add a-element to c
c_ix  = c_ix + 1                                 # - Increment the index of c
a_ix = a_ix +1                                   # - Increment the index of a
} else {                                           # Else (next element of b is smaller)
c[c_ix] = b[b_ix]                                # - then add b-element to c
c_ix  = c_ix + 1                                 # - Increment the index of c
b_ix = b_ix +1                                   # - Increment the index of b
}
}
# Since a or b might be different lengths, we need to check and finish off c
while( (a_ix <= length(a)) ){ # Check if any a left
c[c_ix] = a[a_ix]
c_ix  = c_ix + 1
a_ix = a_ix +1
}
while( (b_ix <= length(b)) ){ # Check if any b left
c[c_ix] = b[b_ix]
c_ix  = c_ix + 1
b_ix = b_ix +1
}
library_names = as.character(read.table('requirements.txt')$V1)
install.packages(library_names)
library_names = as.character(read.table('requirements.txt')$V1)
library_names = as.character(read.table('requirements.txt')$V1)
library_names <- as.character(read.table('requirements.txt')$V1)
source('~/Desktop/schoolwork/dataSci350/preClass/bootstrap_R_libraries.R', echo=TRUE)
source('~/Desktop/schoolwork/dataSci350/preClass/bootstrap_R_libraries.R')
library_names <- as.character(read.table('requirements.txt')$V1)
install.packages(library_names)
library_names <- as.character(read.table('requirements.txt')$V1)
library_names <- as.character(read.table('requirements.txt')$V1)
install.packages(library_names)
library(readr)
requirements_1 <- read_csv("~/Desktop/schoolwork/dataSci350/preClass/requirements-1.txt")
View(requirements_1)
library_names <- as.character(read.table('requirements.txt')$V1)
install.packages(requirements_1)
View(requirements_1)
library_names <- as.character(read.table('requirements.txt')$V1)
library(readr)
requirements_1 <- read_csv("~/Desktop/schoolwork/dataSci350/preClass/requirements-1.txt")
View(requirements_1)
install.packages(requirements_1)
setwd("~/Desktop/schoolwork/dataSci350/preClass")
library_names <- as.character(read.table('requirements.txt')$V1)
=
library_names = as.character(read.table('requirements.txt')$V1)
library(rt)
install.packages(rt)
install.packages("rt")
setwd("~/Desktop/schoolwork/dataSci350")
library_names = as.character(read.table('requirements.txt')$V1)
setwd("~/Desktop/schoolwork/dataSci350/preClass")
library_names = as.character(read.table('requirements.txt')$V1)
library_names = as.character(read.table('requirements.txt')$V1)
install.packages(library_names)
install.packages(library_names)
library(MASS) # has the function 'fractions()', which is useful.
library(MASS) # has the function 'fractions()', which is useful.
breads = c('white', 'wheat', 'italian', 'sevengrain')
meats = c('ham', 'turkey', 'chicken', 'pastrami', 'meatballs')
toppings = c('mustard', 'mayo', 'salt_pepper', 'oil_vinegar')
sandwiches = expand.grid(breads,
meats,
toppings)
two_dice = expand.grid(1:6,1:6)
two_dice$sum = two_dice$Var1 + two_dice$Var2
two_dice$isdouble = two_dice$Var1 == two_dice$Var2
View(two_dice)
View(sandwiches)
sum_counts = table(two_dice$sum)
doubles = sum(two_dice$isdouble)
library(ggplot2)
library(readr)
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
gameCodes <- unique(jhc[1])
baData <- jhc[BA:]
baData <- jhc[BA:]
baData <- jhc[BA:,]
baData <-subset(jhc, [BA:])
baData <-subset(jhc, GameCode = "BA")
library(ggplot2)
library(readr)
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
gameCodes <- unique(jhc[1])
baData <-subset(jhc, GameCode = "BA")
View(baData)
View(jh)
View(jhc)
baData <-subset(jhc, GameCode = BA)
baData <-subset(jhc, GameCode = 'BA')
baData <-subset(jhc, GameCode = c('BA'))
baData <-subset(jhc, GameCode = c("BA"))
baData <-subset(jhc, GameCode = c("BA"))
baData <-subset(jhc, GameCode == c("BA"))
orderBa <- baData[order(DateFormat, Hour)]
orderBa <- baData[order(DateFormat, Hour),]
orderBa <- baData[order(DateFormat, Hour),]
orderBa <- baData[order(DayNumber, Hour),]
orderBa <- baData[order(DayNumber, Hour)]
orderBa <- baData[order(DayNumber, Hour),]
library(ggplot2)
library(readr)
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
gameCodes <- unique(jhc[1])
baData <-subset(jhc, GameCode == c("BA"))
orderBa <- baData[order(DayNumber, Hour),]
orderBa <- baData[order(Hour),]
orderBa <- baData[,order(Hour)]
orderBa <- baData[,order("Hour")]
View(baData)
orderBa <- baData[,order("DayNumber", "Hour")]
orderBa <- baData[,order("DayNumber", "Hour")]
orderBa <- baData[order("DayNumber", "Hour"),]
library(ggplot2)
library(readr)
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
gameCodes <- unique(jhc[1])
baData <-subset(jhc, GameCode == c("BA"))
orderBa <- baData[order("DayNumber", "Hour"),]
library(ggplot2)
library(readr)
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
gameCodes <- unique(jhc[1])
baData <-subset(jhc, GameCode == c("BA"))
orderBa <- baData[order("DayNumber", "Hour"),]
orderBa <- baData[order(baData$DayNumber, baData$Hour),]
View(orderBa)
c4Data <-subset(jhc, GameCode == c("C4"))
orderedC4Data <- c4Data(order(c4Data$DayNumber,c4Data$Hour))
c4Data <-subset(jhc, GameCode == c("C4"))
orderedC4Data <- c4Data(order(c4Data$DayNumber,c4Data$Hour))
c4Data <-subset(jhc, GameCode == c("C4"))
orderedC4Data <- c4Data(order(c4Data$DayNumber,c4Data$Hour))
library(ggplot2)
library(readr)
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
gameCodes <- unique(jhc[1])
baData <-subset(jhc, GameCode == c("BA"))
orderBa <- baData[order(baData$DayNumber, baData$Hour),]
c4Data <-subset(jhc, GameCode == c("C4"))
orderedC4Data <- c4Data(order(c4Data$DayNumber,c4Data$Hour))
orderedC4Data <- c4Data[order(c4Data$DayNumber,c4Data$Hour), ]
View(orderedC4Data)
library(data.table)
library(logging)
library(RSQLite)
library(data.table)
library(logging)
library(RSQLite)
A_matrix = matrix(4, nrow=4, ncol=3) # Makes use of broadcasting
setwd("~/Desktop/schoolwork/dataSci350/week1")
B_matrix = matrix(1:50, nrow=4, ncol=3)
A_matrix + B_matrix # Elementwise
A_matrix * B_matrix # Elementwise
A_matrix %*% B_matrix # Error in matrix multiplication
A_matrix %*% t(B_matrix)
x_values = seq(from=as.Date('2015-01-01'),
to=as.Date('2015-02-12'),
by = 3)
A_matrix * B_matrix # Elementwise
A_matrix %*% B_matrix # Error in matrix multiplication
?'%'
??%
??'%'
A_matrix %*% t(B_matrix)
x_values = seq(from=as.Date('2015-01-01'),
to=as.Date('2015-02-12'),
by = 3)
install.packages("lubridate")
df = data.frame('dates' = x_values,
'x1'    = runif(15,-10,20),
'x2'    = 1:15,
'x3'    = strsplit('MississippiMath','')[[1]])
df
df$x3 = as.character(df$x3)
df$x3 = tolower(df$x3)
str(df)
head(df)
tail(df, n=10)
df = as.data.table(df)
df[,sum(x1)]
df[,c(sum(x1),sd(x2))]
df
df[,c(Sum = sum(x1),
StDev = sd(x2))]
df[,sum(x1), by=x3]
df[1:3, sum(x1), by=x3]
jitteredHeadCounts <- as.data.table(jhc)
library(data.table)
jitteredHeadCounts <- as.data.table(jhc)
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
jitteredHeadCounts <- as.data.table(jhc)
gameCodes <- unique(jhc[1])
df[, x4:= x1+x2]
##--------------------------------------------
##
## R code review (lecture 1)
##
## Class: PCE Data Science Methods Class
##
## Contains examples of:
##
## -Matrices, Dataframe, data.table, apply functions.
##
## -Reading text data, reading web data.
##
## - Dealing with SQLite DBs.
##
##--------------------------------------------
##----Import Libraries----
library(data.table)
library(logging)
library(RSQLite)
##----Set working directory-----
setwd('E:/Work/Teaching/PCE_Data_Science/1_Intro_Lecture')
##----Matrix Review-----
A_matrix = matrix(4, nrow=4, ncol=3) # Makes use of broadcasting
B_matrix = matrix(1:50, nrow=4, ncol=3)
A_matrix + B_matrix # Elementwise
A_matrix * B_matrix # Elementwise
A_matrix %*% B_matrix # Error in matrix multiplication
A_matrix %*% t(B_matrix)
##----Dataframe Review----
x_values = seq(from=as.Date('2015-01-01'),
to=as.Date('2015-02-12'),
by = 3)
df = data.frame('dates' = x_values,
'x1'    = runif(15,-10,20),
'x2'    = 1:15,
'x3'    = strsplit('MississippiMath','')[[1]])
df$x3 = as.character(df$x3)
df$x3 = tolower(df$x3)
str(df)
head(df)
tail(df, n=10)
##----data.table syntax-----
df = as.data.table(df)
# Aggregation
df[,sum(x1)]
df[,c(sum(x1),sd(x2))]
df[,c(Sum = sum(x1),
StDev = sd(x2))]
# Aggregation by groups
df[,sum(x1), by=x3]
# Aggregation by groups on specific rows
df[1:3, sum(x1), by=x3]
# Creating new columns
df[, x4:= x1+x2]
df[,c('x4', 'x5') := list(x1+x2, x1-x2),]
df2 = data.frame('label'  = c('m','i','s','p','a','t'),
'newval' = 5:10)
df2 = as.data.table(df2)
setkey(df,'x3')
setkey(df2,'label')
df_inner = df[df2]  # no more h! (inner join by default)
df_outer = merge(df, df2, all=TRUE) # not quite
df_outer = merge(df, df2, all.x=TRUE, all.y=TRUE, by.x='x3', by.y='label') # nope!
apply(B_matrix, 1, median) # Across rows (2 = across columns)
test_function = function(a, b){
return(ifelse(a>0.5, sin(a),b)) # note: ifelse is the vectorized version of if
}
apply(df, 1, function(x) test_function(as.numeric(x['x1']),
as.numeric(x['x2'])))
lapply(df, as.character)
data.frame(lapply(df, as.character))
medals_data <- read.table("medals.txt", sep="\t", header=TRUE)
str(medals_data)
pairs(medals_data, pch=16)
library(XML)
nfl_site = "http://www.usatoday.com/sports/nfl/arrests/"
nfl_html = readHTMLTable(nfl_site)
nfl_data = nfl_html[[1]]
str(nfl_data)
db_file = 'test_db.db'
conn = dbConnect(dbDriver("SQLite"), dbname=db_file)
dbWriteTable(conn, 'table_name', medals_data, overwrite=TRUE)
query_string = 'SELECT * FROM table_name WHERE Population >= 100'
dbGetQuery(conn, query_string)
dbDisconnect(conn)
library(ggplot2)
library(readr)
library(data.table)
#Questions to answer
#1. If you don't want to play a game alone what game should you play, what time, what day of the week?
#2. If you want to play a game alone what game should you play, what time, what day of the week?
#3. What game or games have more tables than are necessary?
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
jitteredHeadCounts <- as.data.table(jhc)
gameCodes <- unique(jhc[1])
library(ggplot2)
library(readr)
library(data.table)
#Questions to answer
#1. If you don't want to play a game alone what game should you play, what time, what day of the week?
#2. If you want to play a game alone what game should you play, what time, what day of the week?
#3. What game or games have more tables than are necessary?
jhc <- read_csv("~/Desktop/schoolwork/dataSci350/week1/JitteredHeadCount.csv")
jitteredHeadCounts <- as.data.table(jhc)
gameCodes <- unique(jhc[1])
View(jhc)
install.packages("elastic")
library(elastic)
connect()
connect()
docs_get(index='')
docs_get(index='*')
connect()
connect()
connect()
connect()
connect(http://emon-dev-cluster.ember.team:9200/)
connect('http://emon-dev-cluster.ember.team:9200/')
curl -XPUT locahost:9200/_bulk
curl -XPUT localhost:9200/_bulk
curl -XPUT 'http://emon-dev-cluster.ember.team:9200/'
elastic:::make_bulk_plos()
shakespeare <- system.file("examples", "shakespeare_data.json", package = "elastic")
docs_bulk(shakespeare)
connect()
connect('http://emon-dev-cluster.ember.team:9200/')
connect('http://emon-dev-cluster.ember.team:9200/')
Search()
connect({
"name" : "i_bbec8ba3",
"cluster_name" : "emon-dev",
"cluster_uuid" : "jmAjN3lhSOCfxNzT69009Q",
"version" : {
"number" : "2.4.1",
"build_hash" : "c67dc32e24162035d18d6fe1e952c4cbcbe79d16",
"build_timestamp" : "2016-09-27T18:57:55Z",
"build_snapshot" : false,
"lucene_version" : "5.5.2"
},
"tagline" : "You Know, for Search"
})
connect('{
"name" : "i_bbec8ba3",
"cluster_name" : "emon-dev",
"cluster_uuid" : "jmAjN3lhSOCfxNzT69009Q",
"version" : {
"number" : "2.4.1",
"build_hash" : "c67dc32e24162035d18d6fe1e952c4cbcbe79d16",
"build_timestamp" : "2016-09-27T18:57:55Z",
"build_snapshot" : false,
"lucene_version" : "5.5.2"
},
"tagline" : "You Know, for Search"
}')
connect('http://emon-dev-cluster.ember.team:9200/')
connect('http://emon-dev-cluster.ember.team')
connect('http://emon-dev-cluster.ember.team:9200/')
connect(es_host = "http://emon-dev-cluster.ember.team/", es_port = 9200)
connect(es_host = "emon-dev-cluster.ember.team/", es_port = 9200)
ping
ping()
connect(es_host = "http://emon-dev-cluster.ember.team/", es_port = 9200)
connect(es_host = "http://emon-dev-cluster.ember.team/", es_port = 9200, es_user = "emon-dev")
connect(es_host = "127.0.0.1", es_port = 9200)
connect
connect()
connect(es_host = "http://emon-dev-cluster.ember.team/")
connect(es_host = "http://emon-dev-cluster.ember.team/")
connect(es_pasth = "http://emon-dev-cluster.ember.team/")
connect(es_path = "http://emon-dev-cluster.ember.team/")
connect(es_host = "http://emon-dev-cluster.ember.team/")
connect(es_host = "http://emon-dev-cluster.ember.team/")
